//
// Created by wangxiaobao on 18-9-7.
//

#include <sys/time.h>
#include "../include/Util.h"

long Util::sysTimeMs() {

    return Util::sysTimeUs() / 1000;
}

long Util::sysTimeUs() {
    struct timeval first_time;
    gettimeofday(&first_time, NULL);
    long time = first_time.tv_sec * 1000000 + first_time.tv_usec;

    return time;
}

int Util::abs(int p1, int p2) {
    //return abs(p1,p2);
    if (p1 > p2) return p1 - p2;

    return p2-p1;
}

/**
 * 求指定角度的正切值
 * @param angle 角度
 * @return 对应的正切值
 */
float Util::getTanByAngle(int angle) {
    return tan(3.1416 / 180 * angle);
}

float UtilgetDistance(int yPos) {
    static float disOri[] = {
            5
            , 5.11905
            , 5.2381
            , 5.35714
            , 5.47619
            , 5.59524
            , 5.71429
            , 5.83333
            , 5.95238
            , 6.07143
            , 6.19048
            , 6.30952
            , 6.42857
            , 6.54762
            , 6.66667
            , 6.78571
            , 6.90476
            , 7.02381
            , 7.14286
            , 7.2619
            , 7.38095
            , 7.5
            , 7.61905
            , 7.7381
            , 7.85714
            , 7.97619
            , 8.09524
            , 8.21429
            , 8.33333
            , 8.45238
            , 8.57143
            , 8.69048
            , 8.80952
            , 8.92857
            , 9.04762
            , 9.16667
            , 9.28571
            , 9.40476
            , 9.52381
            , 9.64286
            , 9.7619
            , 9.88095
            , 10
            , 10.3125
            , 10.625
            , 10.9375
            , 11.25
            , 11.5625
            , 11.875
            , 12.1875
            , 12.5
            , 12.8125
            , 13.125
            , 13.4375
            , 13.75
            , 14.0625
            , 14.375
            , 14.6875
            , 15
            , 15.3125
            , 15.625
            , 15.9375
            , 16.25
            , 16.5625
            , 16.875
            , 17.1875
            , 17.5
            , 17.8125
            , 18.125
            , 18.4375
            , 18.75
            , 19.0625
            , 19.375
            , 19.6875
            , 20
            , 20.90909
            , 21.81818
            , 22.72727
            , 23.63636
            , 24.54545
            , 25.45455
            , 26.36364
            , 27.27273
            , 28.18182
            , 29.09091
            , 30
            , 31.66667
            , 33.33333
            , 35
            , 36.66667
            , 38.33333
            , 40
            , 41.66667
            , 43.33333
            , 45
            , 46.66667
            , 48.33333
            , 50
            , 53.33333
            , 56.66667
            , 60
            , 70
            , 90
            , 100
    };

    int d = 600 -yPos;
    if (d >=0 && d < sizeof(disOri)/sizeof(disOri[0])){
        return disOri[d];
    } else if (d < 0){
        return 3;
    } else {
        return INVALID_DISTANCE;
    }
}


float Util::getDistance(int yPos){
	return UtilgetDistance(yPos);
	if (yPos > 719){
		return 0.5;
	}
	if (yPos > 719 || yPos < 360){
		return INVALID_DISTANCE;
	}

	static float sDistance[]={
			 0.55501
			,0.64642
			,0.73633
			,0.82476
			,0.91172
			,0.99723
			,1.08129
			,1.16393
			,1.24515
			,1.32496
			,1.40339
			,1.48045
			,1.55614
			,1.63049
			,1.70351
			,1.7752
			,1.84559
			,1.91469
			,1.98251
			,2.04906
			,2.11436
			,2.17842
			,2.24126
			,2.30288
			,2.36331
			,2.42256
			,2.48063
			,2.53755
			,2.59332
			,2.64797
			,2.7015
			,2.75392
			,2.80526
			,2.85553
			,2.90473
			,2.95288
			,3
			,3.0461
			,3.09119
			,3.13529
			,3.1784
			,3.22056
			,3.26175
			,3.30201
			,3.34135
			,3.37977
			,3.41729
			,3.45393
			,3.4897
			,3.5246
			,3.55867
			,3.5919
			,3.62432
			,3.65593
			,3.68676
			,3.71681
			,3.74609
			,3.77463
			,3.80243
			,3.82951
			,3.85588
			,3.88156
			,3.90656
			,3.93088
			,3.95456
			,3.97759
			,4
			,4.02179
			,4.04299
			,4.0636
			,4.08364
			,4.10311
			,4.12205
			,4.14045
			,4.15833
			,4.17571
			,4.1926
			,4.20901
			,4.22496
			,4.24046
			,4.25552
			,4.27016
			,4.28439
			,4.29822
			,4.31168
			,4.32476
			,4.33749
			,4.34988
			,4.36194
			,4.37368
			,4.38513
			,4.39629
			,4.40717
			,4.4178
			,4.42818
			,4.43833
			,4.44826
			,4.45798
			,4.46751
			,4.47686
			,4.48605
			,4.49509
			,4.50399
			,4.51277
			,4.52143
			,4.53
			,4.53849
			,4.54691
			,4.55527
			,4.56359
			,4.57188
			,4.58015
			,4.58843
			,4.59672
			,4.60503
			,4.61338
			,4.62178
			,4.63026
			,4.63881
			,4.64745
			,4.6562
			,4.66508
			,4.67408
			,4.68324
			,4.69256
			,4.70205
			,4.71173
			,4.72161
			,4.73171
			,4.74204
			,4.75261
			,4.76344
			,4.77454
			,4.78593
			,4.79761
			,4.8096
			,4.82192
			,4.83457
			,4.84758
			,4.86095
			,4.87471
			,4.88885
			,4.9034
			,4.91837
			,4.93378
			,4.94963
			,4.96594
			,4.98273
			,5
			,5.01777
			,5.03606
			,5.05486
			,5.0742
			,5.09407
			,5.11448
			,5.13546
			,5.15699
			,5.1791
			,5.20179
			,5.22507
			,5.24896
			,5.27345
			,5.29856
			,5.32429
			,5.35067
			,5.37768
			,5.40535
			,5.43369
			,5.46269
			,5.49238
			,5.52275
			,5.55383
			,5.58561
			,5.61811
			,5.65134
			,5.68529
			,5.72
			,5.75545
			,5.79167
			,5.82866
			,5.86642
			,5.90498
			,5.94433
			,5.98449
			,6.02546
			,6.06726
			,6.10989
			,6.15336
			,6.19768
			,6.24287
			,6.28892
			,6.33585
			,6.38367
			,6.43239
			,6.482
			,6.53254
			,6.58399
			,6.63638
			,6.68971
			,6.74399
			,6.79922
			,6.85543
			,6.91261
			,6.97077
			,7.02993
			,7.0901
			,7.15128
			,7.21347
			,7.2767
			,7.34097
			,7.40629
			,7.47266
			,7.5401
			,7.60862
			,7.67822
			,7.74891
			,7.8207
			,7.89361
			,7.96764
			,8.04279
			,8.11909
			,8.19653
			,8.27512
			,8.35488
			,8.43582
			,8.51794
			,8.60124
			,8.68575
			,8.77147
			,8.85841
			,8.94658
			,9.03598
			,9.12663
			,9.21853
			,9.3117
			,9.40614
			,9.50186
			,9.59887
			,9.69718
			,9.7968
			,9.89774
			,10
			,10.10362
			,10.20876
			,10.31556
			,10.42422
			,10.5349
			,10.64776
			,10.76299
			,10.88075
			,11.00121
			,11.12455
			,11.25094
			,11.38054
			,11.51352
			,11.65007
			,11.79035
			,11.93452
			,12.08277
			,12.23526
			,12.39217
			,12.55366
			,12.7199
			,12.89108
			,13.06735
			,13.24889
			,13.43586
			,13.62845
			,13.82683
			,14.03115
			,14.2416
			,14.45834
			,14.68155
			,14.9114
			,15.14806
			,15.39169
			,15.64247
			,15.90058
			,16.16618
			,16.43944
			,16.72053
			,17.00963
			,17.30691
			,17.61254
			,17.92668
			,18.24951
			,18.5812
			,18.92193
			,19.27186
			,19.63116
			,20
			,20.37899
			,20.77043
			,21.17707
			,21.60165
			,22.0469
			,22.51557
			,23.01039
			,23.53411
			,24.08946
			,24.67919
			,25.30604
			,25.97274
			,26.68204
			,27.43668
			,28.23939
			,29.09292
			,30
			,30.96433
			,31.9934
			,33.09564
			,34.27951
			,35.55344
			,36.92587
			,38.40524
			,40
			,41.71858
			,43.56943
			,45.56099
			,47.7017
			,50
			,52.46433
			,55.10313
			,57.92485
			,60.93792
			,64.15079
			,67.5719
			,71.20968
			,75.07259
			,79.16906
			,83.50753
			,88.09644
			,92.94424
			,98.05936
			,103.45025
			,109.12535
			,115.0931
			,121.36193
			,127.9403
			,134.83665
			,142.05941
			,149.61702
			,157.51793
			,165.77057
			,174.3834
			,183.36485
			,192.72335
			,202.46736
			,212.60532
			,223.14566
			,234.09682
			,245.46725
			,257.26539
			,269.49968
			,282.17856
			,295.31047
			,308.90386
			,322.96716
			,337.50881
			,352.53726
	};

	int pos = 719 - yPos;
	return sDistance[pos];
}

cv::Mat Util::YUV2RGB(cv::Mat& mat){
	return mat;
	if (mat.channels() >= 3){
		return mat;
	}
	// Convert from yuv to rgb
	cv::Mat rgb;
	cv::cvtColor( mat, rgb, cv::COLOR_YUV2RGB_UYVY );
	return rgb;
}

cv::Mat Util::RGB2YUV(cv::Mat& mat){
	return mat;
	if (mat.channels() == 2){
		return mat;
	}
	// Convert from rgb to yuv
	cv::Mat yuv;
	cv::cvtColor( mat, yuv, cv::COLOR_RGB2YUV );

	return yuv;
}

UtilTimeDiff::UtilTimeDiff(string title) {
    this->title = title;
    time = Util::sysTimeUs();
}

UtilTimeDiff::~UtilTimeDiff() {
    long timeDiff = Util::sysTimeUs() - time;
    //cout << title << ":timeDiff:[" << timeDiff << "us " << timeDiff*1.0 / 1000 << "ms]"<<endl;
}
